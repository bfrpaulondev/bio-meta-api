"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerSwagger = registerSwagger;
const swagger_1 = __importDefault(require("@fastify/swagger"));
const swagger_ui_1 = __importDefault(require("@fastify/swagger-ui"));
const environment_1 = require("@config/environment");
async function registerSwagger(fastify) {
    await fastify.register(swagger_1.default, {
        openapi: {
            openapi: '3.0.0',
            info: {
                title: 'Fitness App API - Modular Monolith',
                description: `
# API Completa para Aplicativo de Fitness

Esta √© uma API RESTful completa desenvolvida com arquitetura **Modular Monolith** usando **Fastify**, **TypeScript**, **MongoDB** e **JWT**.

## Funcionalidades Principais

### üèãÔ∏è Treinos e Exerc√≠cios
- Cria√ß√£o e gerenciamento de treinos personalizados
- Biblioteca de exerc√≠cios com instru√ß√µes detalhadas
- Logs de treino com m√©tricas de performance
- Templates de treino p√∫blicos e privados

### üìä Dashboard e Estat√≠sticas
- Dashboard personalizado com widgets configur√°veis
- Estat√≠sticas detalhadas de progresso
- Insights personalizados com IA
- Compara√ß√µes entre per√≠odos

### üõí Lista de Compras Inteligente
- Gerenciamento de listas de compras
- Controle de or√ßamento mensal
- Hist√≥rico de pre√ßos
- Alertas de gastos

### üìè Medidas Corporais
- Registro de medidas corporais
- Fotos de progresso
- Metas de medidas
- Perfil de sa√∫de completo

### üéØ Metas e Lembretes
- Sistema de metas SMART
- Lembretes personaliz√°veis
- Conquistas e gamifica√ß√£o
- Dicas di√°rias

### üì± Galeria e M√≠dia
- Upload de fotos e v√≠deos
- Compara√ß√µes antes/depois
- √Ålbuns organizados
- Compartilhamento social

### ‚è±Ô∏è Cron√¥metros e Timers
- Timers de treino
- Cron√¥metros de descanso
- Templates de intervalos
- Hist√≥rico de sess√µes

### ‚öôÔ∏è Configura√ß√µes Avan√ßadas
- Configura√ß√µes personaliz√°veis
- Integra√ß√µes externas (Google Fit, HealthKit)
- Backup e sincroniza√ß√£o
- Exporta√ß√£o de dados

## Tecnologias Utilizadas

- **Backend**: Fastify + TypeScript
- **Banco de Dados**: MongoDB + Mongoose
- **Autentica√ß√£o**: JWT + Refresh Tokens
- **Valida√ß√£o**: TypeBox + Zod
- **Documenta√ß√£o**: Swagger/OpenAPI 3.0
- **Upload**: Multipart + Sharp
- **Seguran√ßa**: Helmet + Rate Limiting
- **IA**: Integra√ß√£o com ChatGPT

## Arquitetura

A API segue o padr√£o **Modular Monolith**, organizando o c√≥digo em m√≥dulos independentes:

\`\`\`
src/
‚îú‚îÄ‚îÄ modules/           # M√≥dulos de neg√≥cio
‚îÇ   ‚îú‚îÄ‚îÄ auth/         # Autentica√ß√£o e autoriza√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ dashboard/    # Dashboard e estat√≠sticas
‚îÇ   ‚îú‚îÄ‚îÄ workouts/     # Treinos e exerc√≠cios
‚îÇ   ‚îú‚îÄ‚îÄ shopping/     # Lista de compras
‚îÇ   ‚îú‚îÄ‚îÄ measurements/ # Medidas corporais
‚îÇ   ‚îú‚îÄ‚îÄ gallery/      # Galeria de m√≠dia
‚îÇ   ‚îú‚îÄ‚îÄ timer/        # Cron√¥metros
‚îÇ   ‚îú‚îÄ‚îÄ goals/        # Metas e lembretes
‚îÇ   ‚îî‚îÄ‚îÄ settings/     # Configura√ß√µes
‚îú‚îÄ‚îÄ shared/           # C√≥digo compartilhado
‚îÇ   ‚îú‚îÄ‚îÄ middleware/   # Middlewares
‚îÇ   ‚îú‚îÄ‚îÄ utils/        # Utilit√°rios
‚îÇ   ‚îú‚îÄ‚îÄ types/        # Tipos TypeScript
‚îÇ   ‚îî‚îÄ‚îÄ database/     # Conex√£o com banco
‚îî‚îÄ‚îÄ config/           # Configura√ß√µes
\`\`\`

## Autentica√ß√£o

A API utiliza **JWT (JSON Web Tokens)** para autentica√ß√£o:

1. **Login**: \`POST /api/auth/login\`
2. **Registro**: \`POST /api/auth/register\`
3. **Refresh Token**: \`POST /api/auth/refresh\`
4. **Logout**: \`POST /api/auth/logout\`

### Como usar:

1. Fa√ßa login para obter o token
2. Inclua o token no header: \`Authorization: Bearer <token>\`
3. Use o refresh token para renovar quando necess√°rio

## Rate Limiting

- **Limite geral**: 100 requisi√ß√µes por minuto
- **Login**: 5 tentativas por minuto
- **Upload**: 10 uploads por minuto

## C√≥digos de Resposta

- **200**: Sucesso
- **201**: Criado com sucesso
- **400**: Dados inv√°lidos
- **401**: N√£o autorizado
- **403**: Acesso negado
- **404**: N√£o encontrado
- **429**: Muitas requisi√ß√µes
- **500**: Erro interno do servidor

## Suporte

Para d√∫vidas ou suporte, entre em contato:
- **Email**: paulo@example.com
- **GitHub**: https://github.com/bfrpaulondev/fastify-modular-monolith-api
        `,
                version: '1.0.0',
                contact: {
                    name: 'Paulo Neto',
                    email: 'paulo@example.com',
                    url: 'https://github.com/bfrpaulondev'
                },
                license: {
                    name: 'MIT',
                    url: 'https://opensource.org/licenses/MIT'
                },
                termsOfService: 'https://fitness-app.com/terms'
            },
            servers: [
                {
                    url: `http://${environment_1.config.server.host}:${environment_1.config.server.port}`,
                    description: 'Servidor de desenvolvimento'
                },
                {
                    url: 'https://api.fitness-app.com',
                    description: 'Servidor de produ√ß√£o'
                }
            ],
            components: {
                securitySchemes: {
                    bearerAuth: {
                        type: 'http',
                        scheme: 'bearer',
                        bearerFormat: 'JWT',
                        description: 'Token JWT obtido atrav√©s do endpoint de login'
                    }
                },
                responses: {
                    UnauthorizedError: {
                        description: 'Token de acesso inv√°lido ou expirado',
                        content: {
                            'application/json': {
                                schema: {
                                    type: 'object',
                                    properties: {
                                        success: { type: 'boolean', example: false },
                                        error: { type: 'string', example: 'Token de acesso inv√°lido ou expirado' },
                                        code: { type: 'string', example: 'UNAUTHORIZED' }
                                    }
                                }
                            }
                        }
                    },
                    ValidationError: {
                        description: 'Dados de entrada inv√°lidos',
                        content: {
                            'application/json': {
                                schema: {
                                    type: 'object',
                                    properties: {
                                        success: { type: 'boolean', example: false },
                                        error: { type: 'string', example: 'Dados de entrada inv√°lidos' },
                                        code: { type: 'string', example: 'VALIDATION_ERROR' },
                                        details: { type: 'array', items: { type: 'object' } }
                                    }
                                }
                            }
                        }
                    },
                    RateLimitError: {
                        description: 'Limite de requisi√ß√µes excedido',
                        content: {
                            'application/json': {
                                schema: {
                                    type: 'object',
                                    properties: {
                                        success: { type: 'boolean', example: false },
                                        error: { type: 'string', example: 'Muitas requisi√ß√µes. Tente novamente mais tarde.' },
                                        code: { type: 'string', example: 'RATE_LIMIT_EXCEEDED' }
                                    }
                                }
                            }
                        }
                    },
                    NotFoundError: {
                        description: 'Recurso n√£o encontrado',
                        content: {
                            'application/json': {
                                schema: {
                                    type: 'object',
                                    properties: {
                                        success: { type: 'boolean', example: false },
                                        error: { type: 'string', example: 'Recurso n√£o encontrado' },
                                        code: { type: 'string', example: 'NOT_FOUND' }
                                    }
                                }
                            }
                        }
                    },
                    InternalServerError: {
                        description: 'Erro interno do servidor',
                        content: {
                            'application/json': {
                                schema: {
                                    type: 'object',
                                    properties: {
                                        success: { type: 'boolean', example: false },
                                        error: { type: 'string', example: 'Erro interno do servidor' },
                                        code: { type: 'string', example: 'INTERNAL_SERVER_ERROR' }
                                    }
                                }
                            }
                        }
                    }
                },
                examples: {
                    SuccessResponse: {
                        summary: 'Resposta de sucesso padr√£o',
                        value: {
                            success: true,
                            message: 'Opera√ß√£o realizada com sucesso',
                            data: {}
                        }
                    },
                    PaginatedResponse: {
                        summary: 'Resposta paginada padr√£o',
                        value: {
                            success: true,
                            data: [],
                            pagination: {
                                page: 1,
                                limit: 10,
                                total: 100,
                                totalPages: 10,
                                hasNext: true,
                                hasPrev: false
                            }
                        }
                    }
                }
            },
            tags: [
                {
                    name: 'Autentica√ß√£o',
                    description: 'Opera√ß√µes de autentica√ß√£o e autoriza√ß√£o',
                    externalDocs: {
                        description: 'Documenta√ß√£o de autentica√ß√£o',
                        url: 'https://docs.fitness-app.com/auth'
                    }
                },
                {
                    name: 'Dashboard',
                    description: 'Estat√≠sticas e vis√£o geral do usu√°rio',
                    externalDocs: {
                        description: 'Guia do dashboard',
                        url: 'https://docs.fitness-app.com/dashboard'
                    }
                },
                {
                    name: 'Treinos',
                    description: 'Gerenciamento de treinos e exerc√≠cios',
                    externalDocs: {
                        description: 'Guia de treinos',
                        url: 'https://docs.fitness-app.com/workouts'
                    }
                },
                {
                    name: 'Lista de Compras',
                    description: 'Gerenciamento de compras e or√ßamento',
                    externalDocs: {
                        description: 'Guia de compras',
                        url: 'https://docs.fitness-app.com/shopping'
                    }
                },
                {
                    name: 'Cron√¥metro',
                    description: 'Cron√¥metros e temporizadores de treino',
                    externalDocs: {
                        description: 'Guia de timers',
                        url: 'https://docs.fitness-app.com/timer'
                    }
                },
                {
                    name: 'Galeria',
                    description: 'Fotos e v√≠deos de progresso',
                    externalDocs: {
                        description: 'Guia da galeria',
                        url: 'https://docs.fitness-app.com/gallery'
                    }
                },
                {
                    name: 'Medidas',
                    description: 'Medidas corporais e metas',
                    externalDocs: {
                        description: 'Guia de medidas',
                        url: 'https://docs.fitness-app.com/measurements'
                    }
                },
                {
                    name: 'Metas',
                    description: 'Metas, lembretes e conquistas',
                    externalDocs: {
                        description: 'Guia de metas',
                        url: 'https://docs.fitness-app.com/goals'
                    }
                },
                {
                    name: 'Configura√ß√µes',
                    description: 'Configura√ß√µes do usu√°rio e aplicativo',
                    externalDocs: {
                        description: 'Guia de configura√ß√µes',
                        url: 'https://docs.fitness-app.com/settings'
                    }
                }
            ],
            externalDocs: {
                description: 'Documenta√ß√£o completa',
                url: 'https://docs.fitness-app.com'
            }
        }
    });
    await fastify.register(swagger_ui_1.default, {
        routePrefix: '/docs',
        uiConfig: {
            docExpansion: 'list',
            deepLinking: true,
            defaultModelsExpandDepth: 2,
            defaultModelExpandDepth: 2,
            displayOperationId: false,
            displayRequestDuration: true,
            filter: true,
            showExtensions: false,
            showCommonExtensions: false,
            tryItOutEnabled: true,
            requestSnippets: true,
            supportedSubmitMethods: ['get', 'post', 'put', 'delete', 'patch'],
            validatorUrl: null
        },
        uiHooks: {
            onRequest: function (request, reply, next) {
                reply.header('X-Frame-Options', 'DENY');
                reply.header('X-Content-Type-Options', 'nosniff');
                next();
            }
        },
        staticCSP: true,
        transformStaticCSP: (header) => header,
        transformSpecification: (swaggerObject, request, reply) => {
            if (environment_1.config.server.nodeEnv === 'production') {
                const servers = swaggerObject.servers?.filter((server) => !server.url.includes('localhost'));
                return { ...swaggerObject, servers };
            }
            return swaggerObject;
        },
        transformSpecificationClone: true
    });
    fastify.get('/docs/openapi.json', async (request, reply) => {
        return fastify.swagger();
    });
    fastify.get('/docs/openapi.yaml', async (request, reply) => {
        const yaml = await Promise.resolve().then(() => __importStar(require('yaml')));
        const spec = fastify.swagger();
        reply.type('application/x-yaml');
        return yaml.stringify(spec);
    });
    fastify.get('/documentation', async (request, reply) => {
        return reply.redirect('/docs');
    });
    fastify.log.info('Swagger documentation configured successfully');
    fastify.log.info(`Documentation available at: http://${environment_1.config.server.host}:${environment_1.config.server.port}/docs`);
}
//# sourceMappingURL=swagger.js.map